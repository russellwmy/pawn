// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod pawn {
    pub mod chat {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Message {
                pub role: _rt::String,
                pub content: _rt::String,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .finish()
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod handler {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Message = super::super::super::pawn::chat::types::Message;
            #[allow(unused_unsafe, clippy::all)]
            pub fn handle(
                provider: &str,
                model: &str,
                apikey: &str,
                messages: &[Message],
            ) -> Message {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = provider;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = model;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = apikey;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = messages;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * 16,
                        4,
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6.add(i * 16);
                        {
                            let super::super::super::pawn::chat::types::Message {
                                role: role3,
                                content: content3,
                            } = e;
                            let vec4 = role3;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base.add(4).cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = content3;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base.add(12).cast::<usize>() = len5;
                            *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "pawn:chat/handler@0.1.0")]
                    extern "C" {
                        #[link_name = "handle"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        result6,
                        len6,
                        ptr7,
                    );
                    let l8 = *ptr7.add(0).cast::<*mut u8>();
                    let l9 = *ptr7.add(4).cast::<usize>();
                    let len10 = l9;
                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                    let l11 = *ptr7.add(8).cast::<*mut u8>();
                    let l12 = *ptr7.add(12).cast::<usize>();
                    let len13 = l12;
                    let bytes13 = _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    super::super::super::pawn::chat::types::Message {
                        role: _rt::string_lift(bytes10),
                        content: _rt::string_lift(bytes13),
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod pawn {
        pub mod chat {
            #[allow(dead_code, clippy::all)]
            pub mod handler {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Message = super::super::super::super::pawn::chat::types::Message;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let base9 = arg6;
                    let len9 = arg7;
                    let mut result9 = _rt::Vec::with_capacity(len9);
                    for i in 0..len9 {
                        let base = base9.add(i * 16);
                        let e9 = {
                            let l3 = *base.add(0).cast::<*mut u8>();
                            let l4 = *base.add(4).cast::<usize>();
                            let len5 = l4;
                            let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                            let l6 = *base.add(8).cast::<*mut u8>();
                            let l7 = *base.add(12).cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            super::super::super::super::pawn::chat::types::Message {
                                role: _rt::string_lift(bytes5),
                                content: _rt::string_lift(bytes8),
                            }
                        };
                        result9.push(e9);
                    }
                    _rt::cabi_dealloc(base9, len9 * 16, 4);
                    let result10 = T::handle(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                        result9,
                    );
                    let ptr11 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::pawn::chat::types::Message {
                        role: role12,
                        content: content12,
                    } = result10;
                    let vec13 = (role12.into_bytes()).into_boxed_slice();
                    let ptr13 = vec13.as_ptr().cast::<u8>();
                    let len13 = vec13.len();
                    ::core::mem::forget(vec13);
                    *ptr11.add(4).cast::<usize>() = len13;
                    *ptr11.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                    let vec14 = (content12.into_bytes()).into_boxed_slice();
                    let ptr14 = vec14.as_ptr().cast::<u8>();
                    let len14 = vec14.len();
                    ::core::mem::forget(vec14);
                    *ptr11.add(12).cast::<usize>() = len14;
                    *ptr11.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                    ptr11
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                }
                pub trait Guest {
                    fn handle(
                        provider: _rt::String,
                        model: _rt::String,
                        apikey: _rt::String,
                        messages: _rt::Vec<Message>,
                    ) -> Message;
                }
                #[doc(hidden)]
                macro_rules! __export_pawn_chat_handler_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "pawn:chat/handler@0.1.0#handle"] unsafe extern "C" fn
                        export_handle(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8,
                        arg3 : usize, arg4 : * mut u8, arg5 : usize, arg6 : * mut u8,
                        arg7 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_handle_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5,
                        arg6, arg7) } #[export_name =
                        "cabi_post_pawn:chat/handler@0.1.0#handle"] unsafe extern "C" fn
                        _post_return_handle(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_handle::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_pawn_chat_handler_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::alloc;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_chat_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::pawn::chat::handler::__export_pawn_chat_handler_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::pawn::chat::handler);
    };
}
#[doc(inline)]
pub(crate) use __export_chat_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:pawn:chat@0.1.0:chat:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 432] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb5\x02\x01A\x02\x01\
A\x07\x01B\x02\x01r\x02\x04roles\x07contents\x04\0\x07message\x03\0\0\x03\0\x15p\
awn:chat/types@0.1.0\x05\0\x02\x03\0\0\x07message\x01B\x05\x02\x03\x02\x01\x01\x04\
\0\x07message\x03\0\0\x01p\x01\x01@\x04\x08providers\x05models\x06apikeys\x08mes\
sages\x02\0\x01\x04\0\x06handle\x01\x03\x03\0\x17pawn:chat/handler@0.1.0\x05\x02\
\x01B\x05\x02\x03\x02\x01\x01\x04\0\x07message\x03\0\0\x01p\x01\x01@\x04\x08prov\
iders\x05models\x06apikeys\x08messages\x02\0\x01\x04\0\x06handle\x01\x03\x04\0\x17\
pawn:chat/handler@0.1.0\x05\x03\x04\0\x14pawn:chat/chat@0.1.0\x04\0\x0b\x0a\x01\0\
\x04chat\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.2\
20.1\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
